#include <cstdio>
#include <random>
#include <vector>
#include "toolkit/statistics.hh"
#include "toolkit/mathcommon.hh"

using namespace lptk;

typedef std::mt19937 Gen ;
typedef std::uniform_real_distribution<float> Dist;

int test_Distribution1D(Gen& g, Dist& d);

class Histogram
{
public: 
    explicit Histogram(int numBuckets, float xstart, float xend)
        : m_buckets(numBuckets)
        , m_a(xstart)
        , m_b(xend)
        , m_total(0)
    {}

    void Assign(float val)
    {
        const float nval = Clamp(val - m_a / (m_b - m_a), 0.f, 1.f);
        const size_t index = Clamp(size_t(nval * m_buckets.size()),
            size_t(0), size_t(m_buckets.size() - 1));

        ++m_buckets[index];
        ++m_total;
    }

    void Report()
    {
        for(size_t i = 0; i < m_buckets.size(); ++i)
        {
            const float lo = (i / float(m_buckets.size()));
            const float hi = ((i + 1) / float(m_buckets.size()));

            printf("%.2f - %.2f: %u (%f)\n", lo*100.f, hi*100.f, m_buckets[i],
                100.f * m_buckets[i] / float(m_total));
        }
    }

private:
    std::vector<uint32_t> m_buckets;
    float m_a;
    float m_b;
    uint32_t m_total;
};

////////////////////////////////////////////////////////////////////////////////
int main()
{
    Gen gen(1234);
    Dist d(0.f, 1.f);
    int result = 0;

    result = test_Distribution1D(gen, d) ;
    if(result) return result;

    return 0;
}

std::vector<float> samplePowerDistFunc(Gen& g, Dist& d, int power, int num)
{
    std::vector<float> result(num);
    for(int i = 0; i < num; ++i)
    {
        float r = 0.f;
        for(int j = 0; j < power; ++j)
            r = lptk::Max(r, d(g));
        result[i] = r;
    }
    return result;
}

std::vector<float> genPowerFunc(float power, int num)
{
    std::vector<float> result(num);
    for(int i = 0; i < num; ++i)
    {
        const float x = float(i)/float(num);
        result[i] = lptk::Pow(x, power);
    }
    return result;
}

////////////////////////////////////////////////////////////////////////////////
int test_Distribution1D(Gen& g, Dist& d)
{
    constexpr int numSamples = 10000;
    constexpr int numFnSamples = 10000;
    constexpr int power = 5;
    constexpr int histBuckets = 10;

    // direct samples
    std::vector<float> fn = samplePowerDistFunc(g, d, power, numSamples);
   
    // samples from a function shape and then inverse lookups
    std::vector<float> powerFn = genPowerFunc(static_cast<float>(power), numFnSamples);
    Distribution1D dist(&powerFn[0], static_cast<int>(powerFn.size()));
    std::vector<float> distfn(numSamples);
    for(int i = 0; i < numSamples; ++i)
        distfn[i] = dist.SampleContinuous(d(g), NULL);

    Histogram histFn(histBuckets, 0.f, 1.f);
    Histogram histDistFn(histBuckets, 0.f, 1.f);
    for(int i = 0; i < numSamples; ++i)
    {
        histFn.Assign(fn[i]);
        histDistFn.Assign(distfn[i]);
    }

    printf("Histogram for power function (generated directly):\n");
    histFn.Report();

    printf("Histogram for power function (generated by Distribution1D)\n");
    histDistFn.Report();
    
    return 0;
}

